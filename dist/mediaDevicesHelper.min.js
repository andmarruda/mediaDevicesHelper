/**
 * This class is responsible to record audio
 * @version 1.0.0
 * @author Anderson Arruda < anderson@sysborg.com.br >
 * @license MIT
 */
class audioRecorder{}
/**
 * This project is a helper to developers that needs to access camera and microphone, make pictore or record and send it with ajax to a server
 * @version 1.0.0
 * @author Anderson Arruda < anderson@sysborg.com.br >
 * @license MIT
 */class mediaDevices{constructor(e,i,t){this.allowedImageTypes={jpg:"image/jpeg",gif:"image/gif",png:"image/png",svg:"image/svg+xml",webp:"image/webp"},this.audio=Boolean(e),this.video=Boolean(i),this.videoElement=document.getElementById(t.videoElementId),this.audioElement=document.getElementById(t.audioElementId),this.config={},void 0!==this.config.videoWidth&&(this.config.video={width:{...this.config.videoWidth}}),void 0!==this.config.videoHeight&&(this.config.video={...this.config.video,height:{...this.config.videoHeight}}),this.start()}async start(){this.mediaDevices=await navigator.mediaDevices.getUserMedia({audio:this.audio,video:this.config.video||this.video}),this.video&&null!==this.videoElement&&(this.videoElement.srcObject=this.mediaDevices,this.videoElement.play()),this.audio&&null!==this.audioElement&&(this.audioElement.srcObject=this.mediaDevices,this.audioElement.play())}getPicture(e="png"){this.canvas=document.createElement("canvas");let i=this.canvas.getContext("2d");return this.canvas.width=this.videoElement.videoWidth,this.canvas.height=this.videoElement.videoHeight,i.drawImage(this.videoElement,0,0,this.canvas.width,this.canvas.height),this.canvas.toDataURL(this.allowedImageTypes[e])}async getPictureBlob(e="png",i=1){const t=await new Promise((t=>this.canvas.toBlob(t,this.allowedImageTypes[e],i)));return new File([t],"picture.png",{type:this.allowedImageTypes[e],lastModified:Date.now()})}}