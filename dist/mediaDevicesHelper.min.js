/**
 * Creates a method ajax to send some recorded or picture files to some webservice
 * @version 1.0.0
 * @author Anderson Arruda < anderson@sysborg.com.br >
 * @license MIT
 */
class ajax{constructor(e,t,i="POST",s={}){this._progressBar=e,this._formData=new FormData,this._url=t,this._method=i,this._xhr=new XMLHttpRequest;var a=this;null!==this._progressBar&&this._xhr.upload.addEventListener("progress",(e=>{a._progressBar.onProgress(e)})),this._setHeaders(s)}_setHeaders(e){for(let t in e)e.hasOwnProperty(t)&&this._xhr.setRequestHeader(t,e[t])}addFile(e,t){this._formData.append(t,e,e.name)}send(){this._xhr.open(this._method,this._url),this._xhr.send(this._formData)}}
/**
 * This project is a helper to developers that needs to access camera and microphone, make pictore or record and send it with ajax to a server
 * @version 1.0.0
 * @author Anderson Arruda < anderson@sysborg.com.br >
 * @license MIT
 */class mediaDevices{constructor(e,t,i){this._allowedImageTypes={jpg:"image/jpeg",gif:"image/gif",png:"image/png",svg:"image/svg+xml",webp:"image/webp"},this._audio=Boolean(e),this._video=Boolean(t),this._videoElement=document.getElementById(i.videoElementId),this._audioElement=document.getElementById(i.audioElementId),this._config={},void 0!==this._config.videoWidth&&(this._config.video={width:{...this._config.videoWidth}}),void 0!==this._config.videoHeight&&(this._config.video={height:{...this._config.videoHeight}}),this.start()}async start(){this._mediaDevices=await navigator.mediaDevices.getUserMedia({audio:this._audio,video:this._config.video||this._video}),this._video&&null!==this._videoElement&&(this._videoElement.srcObject=this._mediaDevices,this._videoElement.play()),this._audio&&null!==this._audioElement&&(this._audioElement.srcObject=this._mediaDevices,this._audioElement.play())}hasPicture(){return void 0!==this._canvas}getPicture(e="png"){this._canvas=document.createElement("canvas");let t=this._canvas.getContext("2d");return this._canvas.width=this._videoElement.videoWidth,this._canvas.height=this._videoElement.videoHeight,t.drawImage(this._videoElement,0,0,this._canvas.width,this._canvas.height),this._canvas.toDataURL(this._allowedImageTypes[e])}async getPictureBlob(e="png",t=1){const i=await new Promise((i=>this._canvas.toBlob(i,this._allowedImageTypes[e],t)));return new File([i],`picture.${e}`,{type:this._allowedImageTypes[e],lastModified:Date.now()})}getRecorder(){return new recorder(this._mediaDevices)}status(){return void 0!==this._mediaDevices}}
/**
 * ProgressBar for upload
 * @version 1.0.0
 * @author  Anderson Arruda < anderson@sysborg.com.br >
 * @license MIT
 */class progressBar{constructor(e){this._percentageBox=document.getElementById(e.percentageBox),this._progressBar=document.getElementById(e.progressBarId),this._sizeDisplay=document.getElementById(e.sizeDisplay),this._percentage=0,this._loaded=0,this._total=0}onProgress({loaded:e,total:t}){if(this._total=t,this._loaded=e,this._percentage=Math.round(e/t*100),null!==this._percentageBox&&(this._percentageBox.innerHTML=`${this._percentage}%`),null!==this._progressBar&&(this._progressBar.style.width=`${this._percentage}%`),null!==this._sizeDisplay){let e=this._loaded<1024?`${this._loaded} B`:this._loaded>1024&&this._loaded<1048576?`${Math.round(this._loaded/1024)} KB`:`${Math.round(this._loaded/1048576)} MB`,t=this._loaded<1024?`${this._loaded} B`:this._loaded>1024&&this._loaded<1048576?`${Math.round(this._loaded/1024)} KB`:`${Math.round(this._loaded/1048576)} MB`;this._sizeDisplay.innerHTML=`${e} / ${t}`}}}
/**
 * Records all streams from the media device
 * @version 1.0.0
 * @author  Anderson Arruda < anderson@sysborg.com.br >
 * @license MIT
 */class recorder{constructor(e){this._allowedVideoTypes={mp4:"video/mp4",mpeg:"video/mpeg",ogv:"video/ogg",webm:"video/webm"},this._allowedAudioTypes={aac:"audio/aac",mp3:"audio/mpeg",wav:"audio/wav",oga:"audio/ogg",weba:"audio/webm"},this._mediaDevice=e,this._recorder=new MediaRecorder(this._mediaDevice),this._data=[],this._time=0,this._recording=!1,this._error,this._limit=-1,this._dataAvailable=!1;var t=this;this._recorder.addEventListener("dataavailable",(e=>{t._data.push(e.data)})),this._recorder.onstart=()=>t._countTime(),this._recorder.onresume=()=>t._countTime(),this._recorder.onstop=()=>{t._stopCountTime(),t._dataAvailable=!0,console.log(t._data),console.log(t._dataAvailable)},this._recorder.onerror=e=>{t.stop(),t._error=e.name}}setLimit(e){this._limit=1e3*e}_countTime(){this._recording=!0;var e=this;this._interval=setInterval((()=>{e._time++}),1e3)}_stopCountTime(){this._recording=!1,clearInterval(this._interval)}start(){this._time=0,this._dataAvailable=!1,this._recorder.start();var e=this;this._limit>-1&&wait(this._limit).then((()=>{e.stop()}))}resume(){this._recorder.resume()}stop(){this._recorder.stop()}status(){return this._recording}getTime(){return this._time}getError(){return this._error}getBlob(e){this.status()&&this.stop();var t=this;return new Promise((i=>{const s=()=>{t._dataAvailable?i(new Blob(t._data,{type:t._allowedAudioTypes[e]||t._allowedVideoTypes[e]})):setTimeout(s,100)};s()}))}async getAudio(e){const t=await this.getBlob(mimeType);return new File([t],`audio.${e}`,{type:this._allowedAudioTypes[e],lastModified:Date.now()})}async getVideo(e){const t=await this.getBlob(e);return new File([t],`video.${e}`,{type:this._allowedVideoTypes[e],lastModified:Date.now()})}hasRecord(){return this._data.length>0}}